import tensorflow as tf
from tensorflow.keras import layers, models
import numpy as np
import matplotlib.pyplot as plt
(train_images, train_labels), (test_images, test_labels) = tf.keras.datasets.fashion_mnist.load_data()
train_images = train_images.astype('float32') / 255.0
test_images = test_images.astype('float32') / 255.0
train_images = train_images.reshape(train_images.shape[0], 28, 28, 1)
test_images = test_images.reshape(test_images.shape[0], 28, 28, 1)

class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']

def create_model():
    model = models.Sequential([
        layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
        layers.MaxPooling2D((2, 2)),
        
        layers.Conv2D(64, (3, 3), activation='relu'),
        layers.MaxPooling2D((2, 2)),
        
        layers.Conv2D(64, (3, 3), activation='relu'),
        
        layers.Flatten(),
        
        layers.Dense(64, activation='relu'),
        
        layers.Dense(10, activation='softmax')
    ])

model = create_model()
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

history = model.fit(train_images, train_labels, 
                   epochs=10,
                   validation_data=(test_images, test_labels))

def predict_and_display(images, labels):
    predictions = model.predict(images)
    
    plt.figure(figsize=(10, 5))
    for i in range(2):
        plt.subplot(1, 2, i+1)
        plt.imshow(images[i].reshape(28, 28), cmap='gray')
        predicted_label = np.argmax(predictions[i])
        true_label = labels[i]
        title = f'Predicted: {class_names[predicted_label]}\nActual: {class_names[true_label]}'
        plt.title(title)
        plt.axis('off')
    plt.tight_layout()
    plt.show()

test_indices = [0, 1]
test_subset_images = test_images[test_indices]
test_subset_labels = test_labels[test_indices]
predict_and_display(test_subset_images, test_subset_labels)

test_loss, test_accuracy = model.evaluate(test_images, test_labels, verbose=2)
print(f'\nTest accuracy: {test_accuracy:.4f}')
